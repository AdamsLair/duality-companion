<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DualityCompanion.core</name>
    </assembly>
    <members>
        <member name="T:Duality.Plugins.Companion.CompanionPlugin">
            <summary>
            Defines a Duality core plugin.
            </summary>
        </member>
        <member name="M:Duality.Plugins.Companion.Components.CameraMan.Shake(Duality.Plugins.Companion.Components.CameraMan.ShakeDirection,System.UInt32,System.Single,System.UInt32)">
            <summary>
            Adds a shake to the camera. If the previous shaking is not complete, the remaining strength
            will combine with the new one.
            </summary>
            <param name="direction">The direction of the shake.</param>
            <param name="strength">
            The strength of the shake, or how many pixels it will move at most in one direction (assuming
            the shake function stays in its default range of [-1, 1]). Defaults to 10.
            </param>
            <param name="time">How long, in seconds, the shake should last. Defaults to .5.</param>
            <param name="speed">The speed of the shake. The lower, the less the camera will shake. Defaults to 100.</param>
        </member>
        <member name="M:Duality.Plugins.Companion.Components.CameraMan.Shake(Duality.Plugins.Companion.Components.CameraMan.ShakeGenerator,System.UInt32,System.Single,System.UInt32)">
            <summary>
            Adds a shake to the camera. If the previous shaking is not complete, the remaining strength
            will combine with the new one.
            This requires a custom implementation of the generator function.
            </summary>
            <param name="generator">The function that generates displacement based on time.</param>
            <param name="strength">
            The strength of the shake, or how many pixels it will move at most in one direction (assuming
            the shake function stays in its default range of [-1, 1]).
            </param>
            <param name="time">How long, in seconds, the shake should last.</param>
            <param name="speed">The speed of the shake. The lower, the less the camera will shake.</param>
        </member>
        <member name="P:Duality.Plugins.Companion.Components.CameraMan.Target">
            <summary>
            The 
            </summary>
        </member>
        <member name="T:Duality.Plugins.Companion.Components.CameraMan.ShakeGenerator">
            <summary>
            Takes a time, defined as a float value, and returns a Vector2 which represents
            the camera displacement.
            To avoid side effects with the other parameters, the resulting Vector's components
            should be in the range [-1, 1].
            </summary>
        </member>
        <member name="T:Duality.Plugins.Companion.Components.CameraMan.ShakeDirection">
            <summary>
            The type of shaking
            </summary>
        </member>
        <member name="F:Duality.Plugins.Companion.Components.CameraMan.ShakeDirection.Horizontal">
            <summary>
            Left-Right - implemented as a cosine function.
            </summary>
        </member>
        <member name="F:Duality.Plugins.Companion.Components.CameraMan.ShakeDirection.Vertical">
            <summary>
            Up-Down - implemented as a cosine function.
            </summary>
        </member>
        <member name="F:Duality.Plugins.Companion.Components.CameraMan.ShakeDirection.Circular">
            <summary>
            Spiral-like - implemented as a cosine function on the X and a sine on the Y.
            </summary>
        </member>
        <member name="T:Duality.Plugins.Companion.Drawing.Colors">
            <summary>
            Utility class containing the translation of .net's default Colors to ColorRgba objects
            </summary>
        </member>
        <member name="M:Duality.Plugins.Companion.Timer.AddTimer(System.Object,System.Single,Duality.Plugins.Companion.Timer.TimerElapsedEventDelegate,System.Boolean,System.UInt32)">
            <summary>
            Add a Timer to the managed list
            </summary>
            <param name="key">The key of the Timer</param>
            <param name="interval">The interval in milliseconds after which the Timer will fire</param>
            <param name="handler">The handler function that is called after the Timer fires</param>
            <param name="realTime">If true, the Timer will count time based on real time clock, instead of in-game one. Defaults to false</param>
            <param name="repeats">The maximum amount of times the Timer will fire before stopping. Defaults to 1</param>
        </member>
        <member name="M:Duality.Plugins.Companion.Timer.RemoveTimer(System.Object)">
            <summary>
            Remove a Timer from the managed list, if present
            </summary>
            <param name="key">The key of the Timer</param>
        </member>
        <member name="M:Duality.Plugins.Companion.Timer.StartTimer(System.Object)">
            <summary>
            Sets a Timer as Active
            </summary>
            <param name="key">The key of the Timer</param>
        </member>
        <member name="M:Duality.Plugins.Companion.Timer.StopTimer(System.Object)">
            <summary>
            Sets a Timer as Inactive. The elapsed time will not be lost.
            </summary>
            <param name="key">The key of the Timer</param>
        </member>
        <member name="M:Duality.Plugins.Companion.Timer.ClearTimer(System.Object)">
            <summary>
            Sets a Timer as Inactive. The elapsed time will be lost.
            </summary>
            <param name="key">The key of the Timer</param>
        </member>
        <member name="M:Duality.Plugins.Companion.Timer.IsExpired(System.Object)">
            <summary>
            Indicates if a Timer fired in the current frame.
            </summary>
            <param name="key">The key of the Timer</param>
            <returns>True if the Timer fired in this frame. False otherwise</returns>
        </member>
        <member name="M:Duality.Plugins.Companion.Timer.GetCompletion(System.Object)">
            <summary>
            Returns the amount of time passed relative to the whole interval of a Timer.
            </summary>
            <param name="key">The key of the Timer</param>
            <returns>A value between 0 (inclusive) and 1 (exclusive)</returns>
        </member>
        <member name="T:Duality.Plugins.Companion.Tweens.ColorTween">
            <summary>
            Object used to tween Color values.
            </summary>
        </member>
        <!-- Commento XML in formato non corretto ignorato per il membro "T:Duality.Plugins.Companion.Tweens.Tween`1" -->
        <member name="T:Duality.Plugins.Companion.Tweens.ITween`1">
            <summary>
            Interface for a tween object that handles a specific type.
            </summary>
            <typeparam name="T">The type to tween.</typeparam>
        </member>
        <member name="T:Duality.Plugins.Companion.Tweens.ITween">
            <summary>
            Interface for a tween object.
            </summary>
        </member>
        <member name="M:Duality.Plugins.Companion.Tweens.ITween.Pause">
            <summary>
            Pauses the tween.
            </summary>
        </member>
        <member name="M:Duality.Plugins.Companion.Tweens.ITween.Resume">
            <summary>
            Resumes the paused tween.
            </summary>
        </member>
        <member name="M:Duality.Plugins.Companion.Tweens.ITween.Stop(Duality.Plugins.Companion.Tweens.StopBehavior)">
            <summary>
            Stops the tween.
            </summary>
            <param name="stopBehavior">The behavior to use to handle the stop.</param>
        </member>
        <member name="M:Duality.Plugins.Companion.Tweens.ITween.Update(System.Single)">
            <summary>
            Updates the tween.
            </summary>
            <param name="elapsedTime">The elapsed time to add to the tween.</param>
        </member>
        <member name="P:Duality.Plugins.Companion.Tweens.ITween.State">
            <summary>
            Gets the current state of the tween.
            </summary>
        </member>
        <member name="M:Duality.Plugins.Companion.Tweens.ITween`1.Start(`0,`0,System.Single,Duality.Plugins.Companion.Tweens.Easing)">
            <summary>
            Starts a tween.
            </summary>
            <param name="start">The start value.</param>
            <param name="end">The end value.</param>
            <param name="duration">The duration of the tween.</param>
            <param name="scaleFunc">A function used to scale progress over time.</param>
        </member>
        <member name="P:Duality.Plugins.Companion.Tweens.ITween`1.CurrentValue">
            <summary>
            Gets the current value of the tween.
            </summary>
        </member>
        <member name="M:Duality.Plugins.Companion.Tweens.Tween`1.#ctor(Duality.Plugins.Companion.Tweens.LerpFunc{`0})">
            <summary>
            Initializes a new Tween with a given lerp function.
            </summary>
            <remarks>
            C# generics are good but not good enough. We need a delegate to know how to
            interpolate between the start and end values for the given type.
            </remarks>
            <param name="lerpFunc">The interpolation function for the tween type.</param>
        </member>
        <member name="M:Duality.Plugins.Companion.Tweens.Tween`1.Start(`0,`0,System.Single,Duality.Plugins.Companion.Tweens.Easing)">
            <summary>
            Starts a tween.
            </summary>
            <param name="start">The start value.</param>
            <param name="end">The end value.</param>
            <param name="duration">The duration of the tween.</param>
            <param name="scaleFunc">A function used to scale progress over time.</param>
        </member>
        <member name="M:Duality.Plugins.Companion.Tweens.Tween`1.Pause">
            <summary>
            Pauses the tween.
            </summary>
        </member>
        <member name="M:Duality.Plugins.Companion.Tweens.Tween`1.Resume">
            <summary>
            Resumes the paused tween.
            </summary>
        </member>
        <member name="M:Duality.Plugins.Companion.Tweens.Tween`1.Stop(Duality.Plugins.Companion.Tweens.StopBehavior)">
            <summary>
            Stops the tween.
            </summary>
            <param name="stopBehavior">The behavior to use to handle the stop.</param>
        </member>
        <member name="M:Duality.Plugins.Companion.Tweens.Tween`1.Update(System.Single)">
            <summary>
            Updates the tween.
            </summary>
            <param name="elapsedTime">The elapsed time to add to the tween.</param>
        </member>
        <member name="M:Duality.Plugins.Companion.Tweens.Tween`1.UpdateValue">
            <summary>
            Helper that uses the current time, duration, and delegates to update the current value.
            </summary>
        </member>
        <member name="P:Duality.Plugins.Companion.Tweens.Tween`1.CurrentTime">
            <summary>
            Gets the current time of the tween.
            </summary>
        </member>
        <member name="P:Duality.Plugins.Companion.Tweens.Tween`1.Duration">
            <summary>
            Gets the duration of the tween.
            </summary>
        </member>
        <member name="P:Duality.Plugins.Companion.Tweens.Tween`1.State">
            <summary>
            Gets the current state of the tween.
            </summary>
        </member>
        <member name="P:Duality.Plugins.Companion.Tweens.Tween`1.StartValue">
            <summary>
            Gets the starting value of the tween.
            </summary>
        </member>
        <member name="P:Duality.Plugins.Companion.Tweens.Tween`1.EndValue">
            <summary>
            Gets the ending value of the tween.
            </summary>
        </member>
        <member name="P:Duality.Plugins.Companion.Tweens.Tween`1.CurrentValue">
            <summary>
            Gets the current value of the tween.
            </summary>
        </member>
        <member name="M:Duality.Plugins.Companion.Tweens.ColorTween.#ctor">
            <summary>
            Initializes a new ColorTween instance.
            </summary>
        </member>
        <member name="T:Duality.Plugins.Companion.Tweens.FloatTween">
            <summary>
            Object used to tween float values.
            </summary>
        </member>
        <member name="M:Duality.Plugins.Companion.Tweens.FloatTween.#ctor">
            <summary>
            Initializes a new FloatTween instance.
            </summary>
        </member>
        <member name="T:Duality.Plugins.Companion.Tweens.QuaternionTween">
            <summary>
            Object used to tween Quaternion values.
            </summary>
        </member>
        <member name="M:Duality.Plugins.Companion.Tweens.QuaternionTween.#ctor">
            <summary>
            Initializes a new QuaternionTween instance.
            </summary>
        </member>
        <member name="T:Duality.Plugins.Companion.Tweens.ScaleFuncs">
             <summary>
             Defines a set of premade scale functions for use with tweens.
             </summary>
             <remarks>
             To avoid excess allocations of delegates, the public members of ScaleFuncs are already
             delegates that reference private methods.
            
             Implementations based on http://theinstructionlimit.com/flash-style-tweeneasing-functions-in-c
             which are based on http://www.robertpenner.com/easing/
             </remarks>
        </member>
        <member name="F:Duality.Plugins.Companion.Tweens.ScaleFuncs.Linear">
            <summary>
            A linear progress scale function.
            </summary>
        </member>
        <member name="F:Duality.Plugins.Companion.Tweens.ScaleFuncs.QuadraticEaseIn">
            <summary>
            A quadratic (x^2) progress scale function that eases in.
            </summary>
        </member>
        <member name="F:Duality.Plugins.Companion.Tweens.ScaleFuncs.QuadraticEaseOut">
            <summary>
            A quadratic (x^2) progress scale function that eases out.
            </summary>
        </member>
        <member name="F:Duality.Plugins.Companion.Tweens.ScaleFuncs.QuadraticEaseInOut">
            <summary>
            A quadratic (x^2) progress scale function that eases in and out.
            </summary>
        </member>
        <member name="F:Duality.Plugins.Companion.Tweens.ScaleFuncs.CubicEaseIn">
            <summary>
            A cubic (x^3) progress scale function that eases in.
            </summary>
        </member>
        <member name="F:Duality.Plugins.Companion.Tweens.ScaleFuncs.CubicEaseOut">
            <summary>
            A cubic (x^3) progress scale function that eases out.
            </summary>
        </member>
        <member name="F:Duality.Plugins.Companion.Tweens.ScaleFuncs.CubicEaseInOut">
            <summary>
            A cubic (x^3) progress scale function that eases in and out.
            </summary>
        </member>
        <member name="F:Duality.Plugins.Companion.Tweens.ScaleFuncs.QuarticEaseIn">
            <summary>
            A quartic (x^4) progress scale function that eases in.
            </summary>
        </member>
        <member name="F:Duality.Plugins.Companion.Tweens.ScaleFuncs.QuarticEaseOut">
            <summary>
            A quartic (x^4) progress scale function that eases out.
            </summary>
        </member>
        <member name="F:Duality.Plugins.Companion.Tweens.ScaleFuncs.QuarticEaseInOut">
            <summary>
            A quartic (x^4) progress scale function that eases in and out.
            </summary>
        </member>
        <member name="F:Duality.Plugins.Companion.Tweens.ScaleFuncs.QuinticEaseIn">
            <summary>
            A quintic (x^5) progress scale function that eases in.
            </summary>
        </member>
        <member name="F:Duality.Plugins.Companion.Tweens.ScaleFuncs.QuinticEaseOut">
            <summary>
            A quintic (x^5) progress scale function that eases out.
            </summary>
        </member>
        <member name="F:Duality.Plugins.Companion.Tweens.ScaleFuncs.QuinticEaseInOut">
            <summary>
            A quintic (x^5) progress scale function that eases in and out.
            </summary>
        </member>
        <member name="F:Duality.Plugins.Companion.Tweens.ScaleFuncs.SineEaseIn">
            <summary>
            A sinusoidal progress scale function that eases in.
            </summary>
        </member>
        <member name="F:Duality.Plugins.Companion.Tweens.ScaleFuncs.SineEaseOut">
            <summary>
            A sinusoidal progress scale function that eases out.
            </summary>
        </member>
        <member name="F:Duality.Plugins.Companion.Tweens.ScaleFuncs.SineEaseInOut">
            <summary>
            A sinusoidal progress scale function that eases in and out.
            </summary>
        </member>
        <member name="T:Duality.Plugins.Companion.Tweens.StopBehavior">
            <summary>
            The behavior to use when manually stopping a tween.
            </summary>
        </member>
        <member name="F:Duality.Plugins.Companion.Tweens.StopBehavior.AsIs">
            <summary>
            Does not change the current value.
            </summary>
        </member>
        <member name="F:Duality.Plugins.Companion.Tweens.StopBehavior.ForceComplete">
            <summary>
            Forces the tween progress to the end value.
            </summary>
        </member>
        <!-- Commento XML in formato non corretto ignorato per il membro "T:Duality.Plugins.Companion.Tweens.ScaleFunc" -->
        <member name="T:Duality.Plugins.Companion.Tweens.LerpFunc`1">
             <summary>
             Standard linear interpolation function: "start + (end - start) * progress"
             </summary>
             <remarks>
             In a language like C++ we wouldn't need this delegate at all. Templates in C++ would allow us
             to simply write "start + (end - start) * progress" in the tween class and the compiler would
             take care of enforcing that the type supported those operators. Unfortunately C#'s generics
             are not so powerful so instead we must have the user provide the interpolation function.
            
             Thankfully frameworks like XNA and Unity provide lerp functions on their primitive math types
             which means that for most users there is nothing specific to do here. Additionally this file
             provides concrete implementations of tweens for vectors, colors, and more for XNA and Unity
             users, lessening the burden even more.
             </remarks>
             <typeparam name="T">The type to interpolate.</typeparam>
             <param name="start">The starting value.</param>
             <param name="end">The ending value.</param>
             <param name="progress">The interpolation progress.</param>
             <returns>The interpolated value, generally using "start + (end - start) * progress"</returns>
        </member>
        <member name="T:Duality.Plugins.Companion.Tweens.TweenState">
            <summary>
            State of an ITween object
            </summary>
        </member>
        <member name="F:Duality.Plugins.Companion.Tweens.TweenState.Running">
            <summary>
            The tween is running.
            </summary>
        </member>
        <member name="F:Duality.Plugins.Companion.Tweens.TweenState.Paused">
            <summary>
            The tween is paused.
            </summary>
        </member>
        <member name="F:Duality.Plugins.Companion.Tweens.TweenState.Stopped">
            <summary>
            The tween is stopped.
            </summary>
        </member>
        <member name="T:Duality.Plugins.Companion.Tweens.Vector2Tween">
            <summary>
            Object used to tween Vector2 values.
            </summary>
        </member>
        <member name="M:Duality.Plugins.Companion.Tweens.Vector2Tween.#ctor">
            <summary>
            Initializes a new Vector2Tween instance.
            </summary>
        </member>
        <member name="T:Duality.Plugins.Companion.Tweens.Vector3Tween">
            <summary>
            Object used to tween Vector3 values.
            </summary>
        </member>
        <member name="M:Duality.Plugins.Companion.Tweens.Vector3Tween.#ctor">
            <summary>
            Initializes a new Vector3Tween instance.
            </summary>
        </member>
        <member name="T:Duality.Plugins.Companion.Tweens.Vector4Tween">
            <summary>
            Object used to tween Vector4 values.
            </summary>
        </member>
        <member name="M:Duality.Plugins.Companion.Tweens.Vector4Tween.#ctor">
            <summary>
            Initializes a new Vector4Tween instance.
            </summary>
        </member>
    </members>
</doc>
